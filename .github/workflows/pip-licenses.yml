name: Get pip Licenses
run-name: Get pip Licenses
defaults:
  run:
    shell: bash
env:
  WATCH_FILE: requirements.txt
  COMMIT_FILE: BUILD_DEPENDENCY_LICENSES.md
  PY_BUILD_DEPS_FILE: requirements.txt
on: pull_request
jobs:
  generate_python_licenses_file:
    # Permission needed for committing license file
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.base_ref }}

      - name: Set Up Diffing
        # diff fails if no switch/checkout between diffed branches
        run: |
          git pull --verbose
          git checkout "${GITHUB_HEAD_REF}"

      - name: 'Set Condition: WATCH_FILE_CHANGED_IN_PR'
        # diff exits 0 if no change thus reversing for varname with 'CHANGED';
        # also, unknown how to store result as boolean so have to fromJson() the result
        run: |
          var_name=WATCH_FILE_CHANGED_IN_PR
          git diff --exit-code --name-status "${GITHUB_HEAD_REF}..${GITHUB_BASE_REF}" -- "${WATCH_FILE}" &&
            result=false ||
            result=true
          echo "$var_name=${result}" | 
            tee -a "${GITHUB_ENV}" |
            xargs printf "#### %s\n" |
            tee -a "${GITHUB_STEP_SUMMARY}"

      - name: Setup Python Version and Caching
        if: fromJson(env.WATCH_FILE_CHANGED_IN_PR)
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
          cache-dependency-path: '**/requirements*.txt'

      - name: If WATCH_FILE_CHANGED_IN_PR, Run License File Generator Script
        if: fromJson(env.WATCH_FILE_CHANGED_IN_PR)
        # Create two environments to exclude pip-licenses dependencies from output
        run: |
          environments=(
            build-depencies-env
            pip-licenses-env
          )

          echo "::group::${environments[0]}"
          python3 -m venv "${environments[0]}"
          source "${environments[0]}/bin/activate"
          pip install -r "${PY_BUILD_DEPS_FILE}"
          deactivate
          echo "::endgroup::"

          echo "::group::${environments[1]}"
          python3 -m venv "${environments[1]}"
          source "${environments[1]}/bin/activate"
          pip install pip-licenses
          echo "::endgroup::"

          {
            echo -e "# Software Licenses for Build Dependencies of ${GITHUB_REPOSITORY}\n" &&
              echo -e "Generated with [\`pip-licenses\`](https://pypi.org/project/pip-licenses/) on $(date -u +%F)\n" &&
              pip-licenses \
                --python="./${environments[0]}/bin/python3" \
                --from=mixed \
                --order=license \
                --format=markdown &&
              echo -e "\n## Summary\n" &&
              pip-licenses \
                --python="./${environments[0]}/bin/python3" \
                --from=mixed \
                --order=license \
                --format=markdown \
                --summary
          } >"${COMMIT_FILE}"
          status=$?
          deactivate

          echo "::group::markdown"
          cat "${COMMIT_FILE}"
          echo "::endgroup::"
          exit $status

      - name: 'Set Condition: COMMIT_FILE_CHANGED_IN_WORKFLOW'
        # add file in case it did not exist before this run thus not tracked
        run: |
          git status --porcelain
          var_name=COMMIT_FILE_CHANGED_IN_WORKFLOW
          git add --verbose "${COMMIT_FILE}"
          {
            git diff --exit-code --name-status -- "${COMMIT_FILE}" &&
              git diff --exit-code --name-status --cached -- "${COMMIT_FILE}"
          } &&
            result=false ||
            result=true
          echo "$var_name=${result}" |
            tee -a "${GITHUB_ENV}" |
            xargs printf "#### %s\n" |
            tee -a "${GITHUB_STEP_SUMMARY}"
            git status --porcelain
      - name: If COMMIT_FILE_CHANGED_IN_WORKFLOW, Commit and Push
        if: fromJson(env.COMMIT_FILE_CHANGED_IN_WORKFLOW)
        run: |
          git config user.name github-actions[bot]
          git config user.email github-actions[bot]@users.noreply.github.com
          printf -v commit_msg "Update license file with new build dependencies\n\nBot repo: https://github.com\n"
          git commit --verbose --message="${commit_msg}"
          git push --verbose origin "${GITHUB_HEAD_REF}"
