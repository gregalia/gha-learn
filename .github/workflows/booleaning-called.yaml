on:
  workflow_call:
    inputs:
      STRING_INPUT:
        required: true
        type: string
      # NUMBER_INPUT:
      #   required: true
      #   type: number
      # NUMBER_INPUT_AUTO:
      #   required: true
      #   type: number
      BOOLEAN_INPUT:
        required: true
        type: boolean
jobs:
  try:
    runs-on: ubuntu-latest
    steps:
      - name: Env
        run: |-
          env | sort
      - name: Inputs
        run: |-
          echo "::group::inputs
          $(jq --color-output <<<'${{toJSON(inputs)}}')
          ::endgroup::"
          echo "::group::github.event.inputs
          $(jq --color-output <<<'${{toJSON(github.event.inputs)}}')
          ::endgroup::"
      - name: Echo
        env:
          STEP_STRING_INPUT: ${{inputs.STRING_INPUT}}
          # STEP_NUMBER_INPUT: ${{inputs.NUMBER_INPUT}}
          # STEP_NUMBER_INPUT_AUTO: ${{inputs.NUMBER_INPUT_AUTO}}
          STEP_BOOLEAN_INPUT: ${{inputs.BOOLEAN_INPUT}}
        run: |-
          echo "INPUT_STRING_INPUT: '${INPUT_STRING_INPUT}'"
          # echo "INPUT_NUMBER_INPUT: '${INPUT_NUMBER_INPUT}'"
          # echo "INPUT_NUMBER_INPUT_AUTO: '${INPUT_NUMBER_INPUT_AUTO}'"
          echo "INPUT_BOOLEAN_INPUT: '${INPUT_BOOLEAN_INPUT}'"

          echo "STEP_STRING_INPUT: '${STEP_STRING_INPUT}'"
          # echo "STEP_NUMBER_INPUT: '${STEP_NUMBER_INPUT}'"
          # echo "STEP_NUMBER_INPUT_AUTO: '${STEP_NUMBER_INPUT_AUTO}'"
          echo "STEP_BOOLEAN_INPUT: '${STEP_BOOLEAN_INPUT}'"
      - name: Decide Boolean
        if: inputs.BOOLEAN_INPUT
        run: |-
          echo "BOOLEAN_INPUT is true"
      - name: Decide String Implicit
        if: inputs.STRING_INPUT
        run: |-
          echo "STRING_INPUT is true by itself"
      - name: Decide String Explicit
        if: inputs.STRING_INPUT != ''
        run: |-
          echo "STRING_INPUT is true by comparing to an empty string"
      - name: Decide String To JSON
        if: toJSON(inputs.STRING_INPUT)
        run: |-
          echo "STRING_INPUT is true by coercing via toJSON"
      - name: Decide Boolean AND String
        if: inputs.BOOLEAN_INPUT && inputs.STRING_INPUT
        run: |-
          echo "inputs.BOOLEAN_INPUT && inputs.STRING_INPUT"
      - name: Decide Boolean OR String
        if: inputs.BOOLEAN_INPUT || inputs.STRING_INPUT
        run: |-
          echo "inputs.BOOLEAN_INPUT || inputs.STRING_INPUT"
      - name: Decide Boolean NOR String
        if: inputs.BOOLEAN_INPUT || !inputs.STRING_INPUT
        run: |-
          echo "inputs.BOOLEAN_INPUT || !inputs.STRING_INPUT"
      - name: Decide Boolean NAND String
        if: inputs.BOOLEAN_INPUT && !inputs.STRING_INPUT
        run: |-
          echo "inputs.BOOLEAN_INPUT && !inputs.STRING_INPUT"
      - name: Decide NOT Boolean NAND String
        if: ${{!inputs.BOOLEAN_INPUT && !inputs.STRING_INPUT}}
        run: |-
          echo "!inputs.BOOLEAN_INPUT && !inputs.STRING_INPUT"
      - name: Show Warning
        run: |-
          warning_title='WARNING'
          warning_msg='Do better next time'
          echo "::warning title=${warning_title} input::${warning_msg}"
      - name: Show Error
        run: |-
          error_title='ERROR'
          error_msg='No more chances'
          echo "::error title=${error_title} input::${error_msg}"
          exit 1
