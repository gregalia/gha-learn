name: Run on Comment
on:
  issue_comment:
    types: 
      - created
      - edited
permissions:
  contents: read
  issues: read
  pull-requests: read
env:
  GH_TOKEN: ${{ github.token }}
  WORKFLOW_TO_DOWNLOAD_ARTIFACT_FROM: pip-licenses.yml
jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.event.issue.pull_request && github.event.comment.body == '/run'
    steps:
      - name: Get PR Branch
        run: |
          pr_url="$(
            jq --raw-output '.issue.pull_request.url' "${GITHUB_EVENT_PATH}"
          )"
          echo "PR_BRANCH=$(
            gh api "${pr_url}" --jq '.head.ref'
          )" >>"${GITHUB_ENV}"
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ env.PR_BRANCH }}
      - name: Download Run ID Artifact
        run: |
          run_id="$(
            gh run list \
              --branch "${{ env.PR_BRANCH }}" \
              --workflow "${{ env.WORKFLOW_TO_DOWNLOAD_ARTIFACT_FROM }}" \
              --status success \
              --json databaseId \
              --jq '.[0].databaseId'
          )"
          echo "run_id ${run_id}"
          gh run download "${run_id}" \
            --name "${run_id}-BUILD_DEPENDENCY_LICENSES.md" \
            --dir gh_download
          cat gh_download/${run_id}-BUILD_DEPENDENCY_LICENSES.md


# gh run list \
# --json 'status,workflowName,databaseId,headBranch' | 
# jq --raw-output '[.[] | select(
#   .workflowName == "Get pip Licenses" and 
#   .status == "completed" and 
#   .headBranch == "${{ env.PR_BRANCH }}"
# )][0].databaseId'





# current_branch="$(git branch --show-current)"
 



# - uses: actions/upload-artifact@v3
#   with:
#     name: event.json
#     path: ${{ github.event_path }}


# - uses: xt0rted/pull-request-comment-branch@v2
#   id: get-comment-branch


# - uses: actions/github-script@v6
#   with:
#     result-encoding: string
#     script: |
#       console.log(JSON.stringify( context.payload.issue.pull_request.url ))
#       const response = await github.rest.issues.pulls({
#         issue_number: context.issue.number,
#         owner: context.payload.repository.owner.login,
#         repo: context.payload.repository.name,
#       })
# Working example from other workflow
# const { status, data } = await github.rest.pulls.listLanguages({
#   owner: context.repo.owner,
#   repo: context.repo.repo,
#   pull_number: 'PULL_NUMBER',
# })

# https://docs.github.com/en/free-pro-team@latest/rest/pulls/pulls?apiVersion=2022-11-28#get-a-pull-request
# await octokit.request('GET /repos/{owner}/{repo}/pulls/{pull_number}', {
#   owner: 'OWNER',
#   repo: 'REPO',
#   pull_number: 'PULL_NUMBER',
#   headers: {
#     'X-GitHub-Api-Version': '2022-11-28'
#   }
# })

# <comment_event.json | jq '.payload.issue.pull_request.url' -r
# https://api.github.com/repos/gregalia/gha-learn/pulls/20

# gh api /repos/gregalia/gha-learn/pulls/20 --jq '.head.ref'
# pr-comment-build

